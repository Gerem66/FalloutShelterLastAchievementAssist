#!/usr/bin/env python3
"""
Version simple du d√©tecteur de clics qui fonctionne sans interface graphique.
Utilise la lecture de fichiers syst√®me Linux pour d√©tecter les clics.
"""

import struct
import time
import os
import glob

class SimpleMouseDetector:
    def __init__(self):
        self.device_path = None
        self.find_mouse_device()
    
    def find_mouse_device(self):
        """Trouve le p√©riph√©rique de souris dans /dev/input"""
        # Recherche les p√©riph√©riques de souris
        mouse_devices = []
        
        # Recherche dans /dev/input/by-id pour les souris
        by_id_path = "/dev/input/by-id"
        if os.path.exists(by_id_path):
            for device in os.listdir(by_id_path):
                if "mouse" in device.lower():
                    device_path = os.path.join(by_id_path, device)
                    if os.path.exists(device_path):
                        mouse_devices.append(os.path.realpath(device_path))
        
        # Fallback: chercher dans /proc/bus/input/devices
        if not mouse_devices:
            try:
                with open('/proc/bus/input/devices', 'r') as f:
                    content = f.read()
                    # Simple parsing pour trouver les souris
                    devices = content.split('\n\n')
                    for device in devices:
                        if 'mouse' in device.lower() or 'Mouse' in device:
                            for line in device.split('\n'):
                                if line.startswith('H: Handlers='):
                                    handlers = line.split('=')[1]
                                    for handler in handlers.split():
                                        if handler.startswith('event'):
                                            mouse_devices.append(f"/dev/input/{handler}")
            except:
                pass
        
        # Dernier recours: essayer les p√©riph√©riques event
        if not mouse_devices:
            mouse_devices = glob.glob("/dev/input/event*")
        
        if mouse_devices:
            self.device_path = mouse_devices[0]
            print(f"P√©riph√©rique de souris trouv√©: {self.device_path}")
        else:
            print("Aucun p√©riph√©rique de souris trouv√©")
    
    def wait_for_click(self):
        """Attend un clic de souris via les √©v√©nements syst√®me"""
        if not self.device_path:
            print("‚ùå Aucun p√©riph√©rique de souris disponible")
            return None
        
        print("Cliquez n'importe o√π sur l'√©cran...")
        print("Appuyez sur Ctrl+C pour annuler")
        print(f"üì± √âcoute sur {self.device_path}")
        
        try:
            with open(self.device_path, 'rb') as device:
                while True:
                    # Lire un √©v√©nement (24 bytes sur la plupart des syst√®mes)
                    try:
                        data = device.read(24)
                        if len(data) == 24:
                            # D√©composer l'√©v√©nement input_event
                            # struct input_event { time, type, code, value }
                            unpacked = struct.unpack('llHHI', data)
                            sec, usec, event_type, code, value = unpacked
                            
                            # Type 1 = EV_KEY (√©v√©nements clavier/bouton)
                            # Code 272 = BTN_LEFT, 273 = BTN_RIGHT, 274 = BTN_MIDDLE
                            if event_type == 1 and code in [272, 273, 274] and value == 1:
                                button_names = {272: "gauche", 273: "droit", 274: "milieu"}
                                button = button_names.get(code, "inconnu")
                                print(f"Clic {button} d√©tect√©!")
                                
                                # On ne peut pas obtenir les coordonn√©es avec cette m√©thode
                                # mais on d√©tecte bien le clic
                                return ("Clic d√©tect√©", button)
                    except struct.error:
                        continue
                        
        except PermissionError:
            print("‚ùå Permission refus√©e pour acc√©der au p√©riph√©rique de souris")
            print("üí° Essayez de lancer le script avec sudo:")
            print("   sudo python3 simple_mouse_detector.py")
            return None
        except FileNotFoundError:
            print(f"‚ùå P√©riph√©rique {self.device_path} non trouv√©")
            return None
        except KeyboardInterrupt:
            print("\nüëã Op√©ration annul√©e par l'utilisateur")
            return None

def fallback_click_detector():
    """D√©tecteur de clics basique qui fonctionne partout"""
    print("=== D√©tecteur de Clics Simple ===")
    print("Cette version ne n√©cessite pas d'interface graphique")
    print()
    
    detector = SimpleMouseDetector()
    result = detector.wait_for_click()
    
    if result:
        print(f"‚úÖ {result[0]} - Bouton: {result[1]}")
    else:
        print("‚ùå Aucun clic d√©tect√©")

def main():
    """Fonction principale avec instructions"""
    print("üñ±Ô∏è D√©tecteur de Clics Simple (Sans X11)")
    print("=" * 40)
    print()
    print("Cette version fonctionne directement avec les p√©riph√©riques syst√®me")
    print("et ne n√©cessite pas d'interface graphique.")
    print()
    
    # V√©rifier si on est en mode graphique
    display = os.environ.get('DISPLAY')
    if not display:
        print("‚ÑπÔ∏è  Pas d'affichage graphique d√©tect√© - utilisation du mode texte")
        fallback_click_detector()
    else:
        print("‚ÑπÔ∏è  Affichage graphique d√©tect√©")
        print("Si les autres scripts ne marchent pas, vous pouvez:")
        print("1. Essayer: export DISPLAY=:0")
        print("2. Ou utiliser cette version simple")
        print()
        
        choice = input("Utiliser cette version simple ? (o/N): ").lower().startswith('o')
        if choice:
            fallback_click_detector()
        else:
            print("Utilisez les autres scripts avec les corrections sugg√©r√©es.")

if __name__ == "__main__":
    main()
