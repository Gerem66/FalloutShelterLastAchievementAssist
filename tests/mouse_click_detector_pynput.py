#!/usr/bin/env python3
"""
Version alternative utilisant pynput pour une d√©tection plus pr√©cise des clics.
Cette version capture les √©v√©nements syst√®me natifs.
"""

from pynput import mouse
import time
import threading

class MouseClickListener:
    def __init__(self):
        self.click_position = None
        self.listener = None
        self.waiting = False
        self.click_detected = False
    
    def on_click(self, x, y, button, pressed):
        """
        Callback appel√© lors d'un clic de souris
        
        Args:
            x, y: Position du clic
            button: Bouton cliqu√© (left, right, middle)
            pressed: True si le bouton est press√©, False si rel√¢ch√©
        """
        if pressed and not self.click_detected:  # Seulement lors de l'appui
            self.click_position = (x, y)
            button_name = self.get_button_name(button)
            print(f"Clic {button_name} d√©tect√© √† la position : x={x}, y={y}")
            self.click_detected = True
            self.waiting = False
            return False  # Arr√™te l'√©coute
    
    def get_button_name(self, button):
        """Retourne le nom du bouton cliqu√©"""
        if button == mouse.Button.left:
            return "gauche"
        elif button == mouse.Button.right:
            return "droit"
        elif button == mouse.Button.middle:
            return "milieu"
        else:
            return "inconnu"
    
    def on_move(self, x, y):
        """Callback appel√© lors du mouvement de la souris (optionnel)"""
        # Uncomment pour voir le mouvement en temps r√©el
        # print(f"Souris d√©plac√©e vers ({x}, {y})")
        pass
    
    def wait_for_click(self, show_movement=False):
        """
        Attend un clic et retourne la position
        
        Args:
            show_movement: Si True, affiche le mouvement de la souris
            
        Returns:
            tuple: (x, y) position du clic ou None si annul√©
        """
        print("Cliquez n'importe o√π sur l'√©cran...")
        print("Appuyez sur Ctrl+C pour annuler")
        
        self.waiting = True
        self.click_position = None
        self.click_detected = False
        
        try:
            # Configure les callbacks
            callbacks = {'on_click': self.on_click}
            if show_movement:
                callbacks['on_move'] = self.on_move
            
            with mouse.Listener(**callbacks) as self.listener:
                while self.waiting:
                    time.sleep(0.1)  # √âvite une utilisation excessive du CPU
            
            return self.click_position
            
        except KeyboardInterrupt:
            print("\nOp√©ration annul√©e par l'utilisateur")
            return None

def get_current_mouse_position():
    """Retourne la position actuelle de la souris"""
    try:
        # Utilise pynput pour obtenir la position actuelle
        from pynput.mouse import Listener
        
        # Cr√©er un listener temporaire pour obtenir la position
        position = None
        
        def on_move(x, y):
            nonlocal position
            position = (x, y)
            return False  # Arr√™te imm√©diatement
        
        # D√©clenche un √©v√©nement de mouvement en bougeant l√©g√®rement
        with Listener(on_move=on_move) as listener:
            listener.join(timeout=0.1)
        
        return position
    except:
        return None

def main():
    """Fonction principale"""
    print("=== D√©tecteur de Clics de Souris (Version pynput) ===\n")
    
    # Affiche la position actuelle
    current_pos = get_current_mouse_position()
    if current_pos:
        print(f"Position actuelle approximative : {current_pos}")
    
    # Demande √† l'utilisateur s'il veut voir le mouvement
    try:
        show_movement = input("\nVoulez-vous voir le mouvement de la souris en temps r√©el ? (o/N): ").lower().startswith('o')
    except KeyboardInterrupt:
        print("\nAnnul√© par l'utilisateur")
        return
    
    print()
    
    # Cr√©e le listener et attend un clic
    listener = MouseClickListener()
    position = listener.wait_for_click(show_movement)
    
    if position:
        x, y = position
        print(f"\n‚úÖ Position finale du clic : ({x}, {y})")
        
        # Informations suppl√©mentaires
        print(f"üìç Coordonn√©es absolues : x={x}, y={y}")
    else:
        print("‚ùå Aucune position captur√©e")

if __name__ == "__main__":
    main()
